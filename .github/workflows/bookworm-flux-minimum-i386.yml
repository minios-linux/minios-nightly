name: Nightly - bookworm-flux-minimum-i386

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Clone minios-live Repository
      run: |
        git clone --depth 1 https://github.com/minios-linux/minios-live.git
        cd minios-live

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debootstrap xorriso genisoimage binutils squashfs-tools \
          grub-pc-bin grub-efi-amd64-bin dosfstools mtools xz-utils zstd \
          curl rsync

    - name: Run build - Debian 12 Flux Minimum i386
      run: |
        cd minios-live
        echo "Starting build for Debian 12 Flux Minimum i386..."
        sudo ./minios-cmd -d bookworm -a i386 -de flux -pv minimum -aufs -kl
        sudo mkdir -p build/output/bookworm-flux-minimum-i386
        sudo mv build/iso/*.iso build/output/bookworm-flux-minimum-i386/
        echo "Build completed for Debian 12 Flux Minimum i386."

    - name: Archive build output - Debian 12 Flux Minimum i386
      uses: actions/upload-artifact@v3
      with:
        name: minios-bookworm-flux-minimum-i386
        path: minios-live/build/output/bookworm-flux-minimum-i386

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Set Release Tag Name
      id: set_tag
      run: echo "tag_name=$(date +%Y%m%d)" >> $GITHUB_ENV

    - name: Create Release with Date
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo=${{ github.repository }}
        tag_name=${{ env.tag_name }}
        if ! gh release view "$tag_name" --repo "$repo" >/dev/null 2>&1; then
          gh release create "$tag_name" \
            --title "Build $tag_name" \
            --notes "Release notes for Build $tag_name" \
            --repo "$repo"
        fi

    - name: Create or Update Latest Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo=${{ github.repository }}
        today=$(date +%Y-%m-%d)
        latest_date=$(gh release view "latest" --json createdAt --repo "$repo" --jq '.createdAt' 2>/dev/null | cut -d'T' -f1 || echo "")

        if [ "$latest_date" = "$today" ]; then
          echo "The latest release already exists and was created today. Skipping..."
        else
          if [ -n "$latest_date" ]; then
            echo "The latest release exists but was created on a different day. Deleting..."
            gh release delete "latest" --yes --repo "$repo"
          fi

          echo "Creating a new latest release..."
          gh release create "latest" \
            --title "Latest Build" \
            --notes "This is the latest release." \
            --repo "$repo"
        fi

    - name: Upload Release Assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo=${{ github.repository }}
        tag_name=${{ env.tag_name }}
        for artifact in ./artifacts/*/*; do
          gh release upload "$tag_name" "$artifact" --repo "$repo" --clobber
          gh release upload "latest" "$artifact" --repo "$repo" --clobber
        done

    - name: Mark Latest as the Most Recent Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo=${{ github.repository }}
        gh release edit "latest" --latest --repo "$repo"
